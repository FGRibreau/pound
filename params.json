{"body":"Pound [![Build Status](https://secure.travis-ci.org/FGRibreau/pound.png)](http://travis-ci.org/FGRibreau/pound)\r\n==========\r\n\r\nPound 2.0 - High-level asset management for NodeJS/Express like it should be.\r\n\r\nPound allows you to think of **assets in terms of packages/bundles**.\r\n\r\nPound supports **Express 2 and 3** and use [Bundle-Up](https://github.com/FGRibreau/bundle-up) as the underlying asset manager.\r\n\r\nNpm\r\n----\r\n    npm install pound\r\n\r\nBasic usage\r\n------------\r\n\r\n**example/server_simple.js**\r\n```javascript\r\nvar express = require('express')\r\n,   Pound   = require('pound')\r\n,   bundle  = pound.defineAsset; // alias\r\n\r\n// Define where is the public directory\r\nvar pound = Pound.create({\r\n  publicDir: __dirname+'/public',\r\n  staticUrlRoot: '/'\r\n});\r\n\r\n// By default all bundle's assets are public (if another inherit from it, it'll get all of those assets)\r\nbundle('home', {\r\n  // Css assets\r\n  css:[\r\n    '$css/bootstrap-responsive.0.2.4'  // will resolve $js with the pound.resolve.css function\r\n  , '$css/bootstrap.0.2.4'\r\n  , '$css/font-awesome.2.0'\r\n  , '$css/global'\r\n  ],\r\n\r\n  // JS assets\r\n  js:[\r\n    '$js/jquery.1.7.2'  // will resolve $js with the pound.resolve.js function\r\n  , '$js/bootstrap.0.2.4'\r\n  ]\r\n});\r\n\r\nbundle({name:'app', extend:'home'}, {\r\n\r\n  css:[\r\n      'http://twitter.github.com/bootstrap/assets/css/bootstrap' // global url are supported\r\n      '$css/bootstrap-responsive.0.2.4'\r\n    , '$css/bootstrap.0.2.4'\r\n    , '$css/font-awesome.2.0'\r\n    , '$css/global'\r\n  ],\r\n\r\n  js:[\r\n      {'MyApp.env':{}} // object\r\n    , '$js/bootbox.2.3.1'\r\n    , '//sio/socket.io.js' // relative url are supported as well\r\n  ]\r\n});\r\n\r\nvar app =  express.createServer();\r\n\r\napp.configure(function(){\r\n    app.set('views', __dirname + '/app/views');\r\n    app.set('view engine', 'jade');\r\n    app.set('view options', { layout: false });\r\n    app.use(express.cookieParser());\r\n    app.use(express.bodyParser());\r\n    app.use(express.methodOverride());\r\n\r\n    // Assets configuration\r\n    pound.configure(app);\r\n\r\n    // pound.configure(app, [callback on complete])\r\n    // the callback will be called Pound is ready.\r\n\r\n    app.use(express.static(__dirname + '/public'));\r\n});\r\n\r\nfunction render(view) {return function(req, res) {res.render(view);};}\r\n\r\napp.get('/', render('home'));\r\napp.get('/', render('app'));\r\n\r\napp.listen(8080, function(){console.log('Express listening on', app.address().port);});\r\n```\r\n\r\n**example/view/home.jade**\r\n```jade\r\n!!! 5\r\nhtml\r\n  head\r\n    title Pound rocks !\r\n    !{renderStyle(\"home\")}\r\n  body\r\n    p Look at the source code and then try to start the server with\r\n      <pre>NODE_ENV=production node server.js</pre>\r\n    a(href=\"/app\") Go the app page (with app assets)\r\n\r\n    !{renderScript(\"home\")}\r\n```\r\n\r\n**example/view/app.jade**\r\n```jade\r\n!!! 5\r\nhtml\r\n  head\r\n    title Pound rocks !\r\n    !{renderStyle(\"app\")}\r\n  body\r\n    p Look at the source code and then try to start the server with\r\n      <pre>NODE_ENV=production node server.js</pre>\r\n    a(href=\"/\") Go the homepage (with the home assets)\r\n\r\n    !{renderScript(\"app\")}\r\n```\r\n\r\n\r\nRecommended usage\r\n-----------------\r\n\r\n**example/server.js**\r\n```javascript\r\nvar express = require('express'),\r\nassets      = require('./assets'),\r\napp         = express.createServer();\r\n\r\napp.configure(function() {\r\n  app.set('views', __dirname + '/views');\r\n  app.set('view engine', 'jade');\r\n  app.set('view options', {\r\n    layout: false\r\n  });\r\n  app.use(express.cookieParser());\r\n  app.use(express.bodyParser());\r\n  app.use(express.methodOverride());\r\n\r\n  // Assets automatic configuration thanks to Pound\r\n  assets.configure(app);\r\n\r\n  // We still need express.static for serving images and fonts\r\n  app.use(express.static(__dirname + '/public'));\r\n});\r\n\r\nfunction render(view) {return function(req, res) {res.render(view);};}\r\n\r\napp.get('/',    render('home'));\r\napp.get('/app', render('app'));\r\n\r\napp.listen(8080, function(){console.log('Express listening on', app.address().port);});\r\n```\r\n\r\n**example/assets.js**\r\n```javascript\r\n/**\r\n* Specify the assets\r\n*/\r\n\r\nvar pound              = require('pound')\r\n,   bundle             = pound.defineAsset;\r\n\r\n// Default parameters are:\r\n// pound.public        = __dirname + '/public';\r\n// pound.resolve.css   = function(filename){return this.publicDir + '/css/'+filename+'.css';};\r\n// pound.resolve.js    = function(filename){return this.publicDir + '/js/'+filename+'.js';};\r\n\r\n// Override default resolve function for `$js` and `$css`\r\npound.resolve.js       = function(filename){return __dirname + '/assets/js/'+filename+'.js';};\r\npound.resolve.css      = function(filename){return __dirname + '/assets/css/'+filename+'.css';};\r\n\r\n// Add new resolve function for `$myCssDir` and `$appjs`\r\n// The resolve function's result will replace `$resolveFunctionName` for each resources\r\npound.resolve.myCssDir = function(filename){return __dirname + '/assets/css/'+filename+'.css';};\r\npound.resolve.appjs    = function(filename){return __dirname + '/app/'+filename+'.js';};\r\n\r\nbundle('home', {\r\n  // Css assets\r\n  css:[\r\n    '$myCssDir/bootstrap-responsive.0.2.4'  // will resolve $js with the pound.resolve.myCssDir function\r\n  , '$myCssDir/bootstrap.0.2.4'\r\n  , '$myCssDir/font-awesome.2.0'\r\n  ],\r\n\r\n  // JS assets\r\n  js:[\r\n    '$js/jquery.1.7.2'  // will resolve $js with the pound.resolve.js function\r\n  , '$js/bootstrap.0.2.4'\r\n  ]\r\n});\r\n\r\nbundle({name:'app', extend:'home'}, {\r\n  css:[\r\n    '$css/global'\r\n  ],\r\n\r\n  js:[\r\n    {'MyApp.env':{}} // object\r\n  , '$js/bootbox.2.3.1'\r\n  , '//socket.io.js' // url\r\n  , '$appjs/app' // Backbone.sync override\r\n  ]\r\n});\r\n\r\nmodule.exports = pound;\r\n```\r\n\r\n`views/app.jade` and `view/home.jade` are the same as mentionned in the **simple usage**\r\n\r\nOh wait... and it supports OO-style inheritance\r\n-----------------------------------------------\r\n\r\n```javascript\r\n\r\nbundle('app', {\r\n  public:{\r\n    // this will be available to `app` bundle and bundles that inherit from it.\r\n    js:['$js/jquery', '$js/jqueryui', '$js/baseApp'],\r\n    css:['$css/global']\r\n  },\r\n\r\n  private:{\r\n    // the following assets will only be available from the home bundle\r\n    js:['$js/upgrade']\r\n  }\r\n});\r\n\r\nbundle({name:'apppremium', extend:'app'}, {\r\n  public:{\r\n    js:['$js/premiumextensions']\r\n  }\r\n});\r\n\r\n```\r\n\r\n\r\nLicense\r\n-------\r\nCopyright (c) 2012 Francois-Guillaume Ribreau (npm@fgribreau.com)\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining a copy\r\nof this software and associated documentation files (the \"Software\"), to deal\r\nin the Software without restriction, including without limitation the rights\r\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\ncopies of the Software, and to permit persons to whom the Software is\r\nfurnished to do so, subject to the following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be included in\r\nall copies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\nTHE SOFTWARE.\r\n","name":"Pound","tagline":"Pound - High-level asset Manager for Node.js/Express","google":"UA–1844157–4","note":"Don't delete this file! It's used internally to help with page regeneration."}